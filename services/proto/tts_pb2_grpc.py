# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import common_pb2 as common__pb2
from . import llm_pb2 as llm__pb2
from . import tts_pb2 as tts__pb2

GRPC_GENERATED_VERSION = '1.74.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in tts_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class TtsServiceStub(object):
    """Text-to-Speech service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Configure = channel.unary_unary(
                '/aivoice.tts.TtsService/Configure',
                request_serializer=tts__pb2.TtsConfig.SerializeToString,
                response_deserializer=tts__pb2.ConfigureResponse.FromString,
                _registered_method=True)
        self.Speak = channel.unary_unary(
                '/aivoice.tts.TtsService/Speak',
                request_serializer=tts__pb2.TextInput.SerializeToString,
                response_deserializer=tts__pb2.TtsPlayAck.FromString,
                _registered_method=True)
        self.SpeakStream = channel.stream_unary(
                '/aivoice.tts.TtsService/SpeakStream',
                request_serializer=llm__pb2.LlmChunk.SerializeToString,
                response_deserializer=tts__pb2.TtsPlayAck.FromString,
                _registered_method=True)
        self.PlaybackEvents = channel.unary_stream(
                '/aivoice.tts.TtsService/PlaybackEvents',
                request_serializer=common__pb2.DialogRef.SerializeToString,
                response_deserializer=tts__pb2.TtsEvent.FromString,
                _registered_method=True)


class TtsServiceServicer(object):
    """Text-to-Speech service
    """

    def Configure(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Speak(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SpeakStream(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PlaybackEvents(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TtsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Configure': grpc.unary_unary_rpc_method_handler(
                    servicer.Configure,
                    request_deserializer=tts__pb2.TtsConfig.FromString,
                    response_serializer=tts__pb2.ConfigureResponse.SerializeToString,
            ),
            'Speak': grpc.unary_unary_rpc_method_handler(
                    servicer.Speak,
                    request_deserializer=tts__pb2.TextInput.FromString,
                    response_serializer=tts__pb2.TtsPlayAck.SerializeToString,
            ),
            'SpeakStream': grpc.stream_unary_rpc_method_handler(
                    servicer.SpeakStream,
                    request_deserializer=llm__pb2.LlmChunk.FromString,
                    response_serializer=tts__pb2.TtsPlayAck.SerializeToString,
            ),
            'PlaybackEvents': grpc.unary_stream_rpc_method_handler(
                    servicer.PlaybackEvents,
                    request_deserializer=common__pb2.DialogRef.FromString,
                    response_serializer=tts__pb2.TtsEvent.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'aivoice.tts.TtsService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('aivoice.tts.TtsService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class TtsService(object):
    """Text-to-Speech service
    """

    @staticmethod
    def Configure(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aivoice.tts.TtsService/Configure',
            tts__pb2.TtsConfig.SerializeToString,
            tts__pb2.ConfigureResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Speak(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aivoice.tts.TtsService/Speak',
            tts__pb2.TextInput.SerializeToString,
            tts__pb2.TtsPlayAck.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SpeakStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            '/aivoice.tts.TtsService/SpeakStream',
            llm__pb2.LlmChunk.SerializeToString,
            tts__pb2.TtsPlayAck.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PlaybackEvents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/aivoice.tts.TtsService/PlaybackEvents',
            common__pb2.DialogRef.SerializeToString,
            tts__pb2.TtsEvent.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
